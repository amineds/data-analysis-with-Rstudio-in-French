install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
q()
add2 <- function (x,y) {
x + y
}
add2 (5,6)
above <- function(x,n) {
use <- x > n
x[use]
}
x <- 1:10
above (x,5)
above <- function(x,n) {
use <- x > n
print use
x[use]
}
above <- function(x,n) {
use <- x > n
use
x[use]
}
above (x,5)
above <- function(x,n) {
use <- x > n
print use;
x[use]
}
columnmean <- function(y) {
nc = ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] = mean(y[,i])
}
means
}
wd()
pwd()
ls
frame  <- matrix(2,2)
print matrix
matrix
print frame
dataframe  <- matrix(2,2)
str matrix
str(matrix)
dataframe  <- matrix(nrow=2,ncol=2)
dataframe[1,] <- c(2,3)
dataframe[2,] <- c(7,8)
columnmean <- function(y) {
nc = ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] = mean(y[,i])
}
means
}
columnmean(dataframe)
mydata = rnorm(6)
mydata <- rnorm(6)
mydata
str(rnorm)
sd(mydata)
args(lm)
source('C:/Users/benhamza/AppData/Local/NoBackup/Perso - 2/Data Science/R Repository/R scripts/add2.R')
source('C:/Users/benhamza/AppData/Local/NoBackup/Perso - 2/Data Science/R Repository/R scripts/add2.R')
x <- c (1,2)
unclass(x)
str(unclass)
search.help(unclass)
search(unclass)
str(hel)
str(help)
help(unclass())
help(unclass
)
x <- 10
class(x)
unclass(x)
q()
mean(x)
rm(x)
x
mean(x)
traceback()
lm(x~y)
traceback()
?lm
debug(lm)
lm(x~y)
rm
optons(error=recover)
options(error=recover)
read.csv("nofile")
2
q()
q()
str(mean)
str(x)
?lm
?ls
?gl
?rbinom
q(
)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
?qplot
?text()
lpoints()
library(lattice)
lpoints()
?lpoints()
?pnorm
pnorm(93,mean=100,sd=10)
(.88 * .95) / (.88 * .95 + .07 * .05)
qnorm(.95, mean = 100, sd = 10)
round(qnorm(.95, mean = 100, sd = 10),3)
round(qnorm(.95, mean = 100, sd = 10 / sqrt(50) ), 3)
?pbinom
pbinom(4,size=6,p=.5)
pbinom(4,size=6,p=.5,lower.tail=F)
rnorm(100)
x <- rnorm(100)
x
mean(x)
sd(x)
plot(x)
plot(x,color=red)
plot(x,color="red")
plot(x,coluor="red")
plot(x,colour="red")
round(x,2)
warnings()
sd(x)
x <- x + 2
x
sd(x)
mean(x)
x <- round(x,2) + 2
x
mydf <- cbind(1:100,x)
mydf
plot(x,y)
plot(mydf$x,mydf$y)
?plot
names(mydf)
names(mydf) <- c(x,y)
names(mydf) <- c("x","y")
names(mydf)
mydf
mydf.names = NULL
names(mydf)
rm(mydf)
ls()
rm(x)
rm(mydf.names)
ls
l()
ls()
??uniform
punif(.51)
punif(.51,lower.tail= F)
1+2+3+4+5+6/6
(1+2+3+4+5+6)/6
ppois(20,33)
round(ppois(20,33)*100,1)
?pppos
?ppois
pnorm(1,54)
pnorm(1.54)
p <- round(2*pnorm(1.54))
p
p <- round(2*pnorm(1.54,lower.tail=F))
round(2*pnorm(1.54,lower.tail=F),2)
round(2*pnorm(1.54,lower.tail=F),3)
?td
?t.test
?pt
pt(-2.1)
pt(-2.1,df=18)
round(pt(-2.1,df=18)*100,3)
round(pt(-2.1,df=18)*100,1)
pnorm(1)
pnorm(1,mean=0,sd=1)
pnorm(2,mean=0,sd=1)
qnorm(0.68,mean=0,sd=1)
round(pt(1.65,df=20)*100,1)
round(pt(1.65,df=20,lower.tail=F)*100,1)
round(pt(1.65,df=20,lower.tail=F)*100,3)
round(pt(3,df=2,lower.tail=F)*100,3)
2*round(pt(3,df=2,lower.tail=F)*100,3)
round(pt(3,df=2,lower.tail=F)*100,3) + round(pt(-3,df=2,lower.tail=T)*100,3)
qt(0.95,df=18)
round(qt(0.95,df=18),2)
round(qt(0.975,df=18),2)
mean=100; sd=15; lb=80; ub=120
x <- seq(-4,4,length=100)*sd + mean
x
hx <- dnorm(x,mean,sd)
hx
?dnorm
plot(x,hx)
hplot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
library(lattice)
library(ggplot2)
library(ggplot2)
hplot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
library(bard)
packages.install(bard)
package.install("bard")
install.packages("bard")
install.packages("bard")
hplot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
plot(x,hx,colour="red")
plot(x,hx,color="red")
plot(x,hx,col="red")
last.warnings
last.warnings()
qnorm(0.95,mean=30,sd=1)
qnorm(0.95)
qnorm(0.68)
pnorm(2)
pnorm(2,lower.tail=F)
round(pnorm(2,lower.tail=F)*100,3)
?pt
pt(30,df=15)
pt(0.95,df=15)
qt(0.95,df=15)
qt(0.95,df=15)
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
mean(father.son$sheight - father.son$fheight)
sd(father.son$sheight - father.son$fheight)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
head(wideCW)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
head(wideCW)
dim(wideCW)
dim(chickWeight)
dim(ChickWeight)
head(ChickWeight)
unique(ChickWeight$time)
unique(ChickWeight$Time)
length(unique(ChickWeight$Time))
dim(wideCW)
head(wideCW)
library(dplyr)
wideCW <- mutate(wideCW,gain = time21 - time0)
head(wideCW)
unique(wideCW$Diet)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
wideCW14
dim(wideCW)
dim(wideCW14)
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
?t.test
var
?var
var(wideCW14$gain)
var(wideCW14$gain,na.rm=F)
var(wideCW14$gain,na.rm=False)
var(wideCW14$gain,na.rm=TRU)
var(wideCW14$gain,na.rm=TRUE)
var(wideCW14$Diet,na.rm=TRUE)
rexp(6,0.2)
y <- rexp(1000,0.2)
y
x <- 1:1000
plot(x,y)
?rexp
y <- rexp(n=1000,rate=0.2)
plot(x,y)
mean(y)
hist(runif(1000))
runif(1000)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
MNS
mns
hist(mns)
hist(mns,col=red)
hist(mns,col="red")
set.seed
?rexp
install.packages("knitr")
Q()
q()
?t.test
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
baseline
week2
t.test(baseline,week2,PAIRED=TRUE)
t.test(baseline,week2,PAIRED=TRUE,alternative="two.sided")
t.test(baseline,week2,PAIRED=T,alternative="two.sided")
x=c(140,138,150,148,135)
y=c(132,135,151,146,130)
t.test(x,y, alternative = "two.sided", paired = TRUE)
t.test(baseline,week2,alternative="two.sided",PAIRED=T)
t.test(baseline,week2,alternative="two.sided",paired=TRUE)
?power.t.test
power.t.test(n = 9, delta = 1100, sd = 30, sig.level = 0.05, type = "one.sample", alt = "two.sided")
power.t.test(n = 9, delta = 1100, sd = 30, sig.level = 0.05, type = "one.sample", alt = "two.sided")
power.t.test(n = 9, delta = 1100, sd = 30, type = "one.sample", alt = "two.sided")
power.t.test(n = 9, delta = 1100, sd = 30, type = "one.sample", alt = "two.sided")
power.t.test(n = 9, delta = 1100, sd = 30, type = "one.sample", alt = "two.sided")
power.t.test(n = 9, sd = 30, type = "one.sample", alt = "two.sided")
t.test
?t.test
?pnorm()
pnorm(mean=1100,sd=30)
rnorm(n=9,mean=1100,sd=30)
x <- rnorm(n=9,mean=1100,sd=30)
?t.test
t.test(x,alternative = "two.sided",mu=1100)
1100 + c(-1,1) * 30/sqrt(9) * qt(1-.05/2, 9-1)
x <- c(0,1,1,1)
x <- c(-1,1,1,1)
t.test(x,alternative="g",mu=0)
t.test(x,alternative="g")
x <- c(0,1,1,1)
t.test(x,alternative="g")
binom.test(x = 3, n = 4, p=.5, alternative="greater")
?p.norm
?pnorm
pnorm(10/1087,mean=1/100,lower.tail=F)
pnorm(10/1087-1/100)
pnorm(10/1087-1/100,lower.tail=F)
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
??norm.test
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
?qt
pt(q=1078,df=8)
qt(q=1078,df=8)
qt(p=1078,df=8)
qt(0.95,10)
pt(0.95,10)
mtcars
cor(mtcars)
cor(mpg,cyl,disp,hp,wt,carb)
cor(mpg,cyl,disp,hp,wt,carb, data=mtcars)
cor(mtcats["mpg"],mtcars["cyl"])
cor(mtcars["mpg"],mtcars["cyl"])
cor(c(mtcars["mpg"],mtcars["cyl"],mtcars["wt"]))
cor(cbind(mtcars["mpg"],mtcars["cyl"],mtcars["wt"]))
setwd("C:/Users/benhamza/AppData/Local/NoBackup/Perso - 2/Data Science/data-analysis-with-Rstudio-in-French")
knit(main.Rmd)
library(knitr)
knit(main.Rmd)
knit("main.Rmd")
x <- c("$135,359.00", "$135359.00", "$1,135,359.00")
x
sub('\\$','',as.character(x))
sub('\\,','',as.character(x))
sub('\\,','',as.character(x))
sub(',','',as.character(x))
x
x1 <- sub('\\$','',as.character(x))
x1
x2 <- sub(",",'',as.character(x))
x2
x2 <- sub(",",'',as.character(x1))
x2
x1
x2 <- sub(",",'',as.character(x1))
x2
x2 <- sub(",",'',as.character(x2))
x2
as.numeric(x2)
?sub
x1
x2 <- gsub(",",'',as.character(x1))
xé
x2
x2 <- as.numeric(gsub(",",'',as.character(x1)))
x2
gdp_data <- read.csv("gdp.csv",
stringsAsFactors=FALSE,
header = FALSE,
skip=5,
nrows=190,
strip.white = TRUE,
skipNul = TRUE
)
gdp_data
gdp_data <- gdp_data[,c(1,2,4,5)]
gdp_data$V5 <- as.numeric(gsub(",",'',gdp_data$V5))
range(gdp_data$V5)
?format("dplyr-package")
format(13.7)
format(16244600)
?tidy''
?tidyr
library(tidyr)
library(tidy)
View(gdp_data)
packages.install("tidyr")
install.packages("tidyr")
library(tidyr)
tidystamp(gdp_data)
getwd()
gdp_data
View(gdp_data)
merged_data
View(merged_data
)
class(gdp_data$V5)
merged_data = merge(gdp_data,
eds_data,
by.x="V1",
by.y="CountryCode",
all=FALSE
)
names(merged_data)
merged_data$V5
class(merged_data$V5)
merged_data <- reshape::rename(merged_data,c(V1="CountryCode",V2="Rank",V4="CountryName",V5="GDP"))
class(merged_data$GDP)
merged_data <- arrange(merged_data,desc(Rank))
class(merged_data$GDP)
mean(merged_data$Rank[merged_data$Income.Group=="High income: OECD"])
mean(merged_data$Rank[merged_data$Income.Group=="High income: nonOECD"])
range(merged_data$GDP)
